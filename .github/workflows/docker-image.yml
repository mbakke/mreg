name: Docker Image
on:
  push:
    branches: master
  # Run every week to get updated dependencies.
  schedule:
    - cron: '40 08 * * 1'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          # Note: /gnu/store may exceed the limit of 5GiB, so don't
          # cache it.  TODO: Selective caching with 'guix archive'?
          path: |
            ~/.cache/guix
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      - name: Read channels.scm
        run: |
          echo "CHANNELS<<EOF" >> $GITHUB_ENV
          cat ci/channels.scm >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV
      - name: Install Guix
        id: install-guix
        uses: mbakke/guix-install-action@output
        with:
          channels: "${{ env.CHANNELS }}"
      - name: Build mreg
        run: guix build --fallback -m ./ci/manifest.scm
      - name: Pack Docker image
        run: >
          guix pack --fallback -f docker --root=mreg-docker.tar.gz
          -S /app=app -S /etc/profile=etc/profile
          --entry-point=bin/mreg-wrapper
          -m ./ci/manifest.scm
      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: mreg-docker.tar.gz
          path: mreg-docker.tar.gz
      - name: Save channels
        run: |
          cat <<EOF > ${{ runner.temp }}/channels.scm
          ${{ steps.install-guix.outputs.channels }}
          EOF
      - name: Upload channels
        uses: actions/upload-artifact@v2
        with:
          name: channels.scm
          path: ${{ runner.temp }}/channels.scm
      # While we have Guix, save mreg-cli and its tests for later use.
      - name: Pack mreg-cli
        run: guix pack --fallback -RR --root=mreg-cli.tar.gz -S /bin=bin mreg-cli
      - name: Upload mreg-cli
        uses: actions/upload-artifact@v2
        with:
          name: mreg-cli.tar.gz
          path: mreg-cli.tar.gz
      - name: Extract test suite
        run: |
          # For some reason upload path can not contain a symlink, so copy it first.
          SOURCE=$(guix build --root=mreg-cli --source mreg-cli)
          cp -L $SOURCE/testsuite testsuite
      - name: Upload mreg-cli testsuite
        uses: actions/upload-artifact@v2
        with:
          name: testsuite
          path: testsuite

  reproducibility:
    name: Reproduce
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Check Out Repo
        uses: actions/checkout@v2
      - name: Guix cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/guix
          key: guix-cache-${{ github.sha }}
          restore-keys: |
            guix-cache-
      - name: Download channels
        uses: actions/download-artifact@v2
        with:
          name: channels.scm
      - name: Read channels.scm
        run: |
          echo "CHANNELS<<EOF" >> $GITHUB_ENV
          cat channels.scm >> $GITHUB_ENV
          echo EOF >> $GITHUB_ENV
      - name: Install Guix
        uses: mbakke/guix-install-action@output
        with:
          channels: "${{ env.CHANNELS }}"
      - name: Build mreg
        run: guix build --fallback -m ./ci/manifest.scm
      - name: Pack Docker image
        run: >
          guix pack --fallback -f docker
          --save-provenance
          --root=mreg-docker-again.tar.gz
          -S /app=app -S /etc/profile=etc/profile
          --entry-point=bin/mreg-wrapper
          -m ./ci/manifest.scm
      - name: Download previous image
        uses: actions/download-artifact@v2
        with:
          name: mreg-docker.tar.gz
      - name: Install diffoscope
        run: guix package -p ${{ runner.temp }}/diffoscope -i diffoscope
      - name: Check that files are identical
        run: >
          ${{ runner.temp }}/diffoscope/bin/diffoscope
          mreg-docker.tar.gz mreg-docker-again.tar.gz
          > diffoscope.log
      - name: Upload diffoscope output
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: diffoscope.log
          path: diffoscope.log

  publish:
    name: Publish
    needs: reproducibility
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: mreg-docker.tar.gz
      - name: Load image
        run: docker load < mreg-docker.tar.gz
      - name: Log in to registry
        run: >
          echo "${{ secrets.GITHUB_TOKEN }}"
          | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/mreg

          docker tag mreg-wrapper-mreg-python-wrapper:latest $IMAGE_ID:latest
          docker push $IMAGE_ID:latest

  test:
    name: Test
    needs: publish
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgresql-version: [13]
    services:
      postgres:
        image: postgres:${{ matrix.postgresql-version }}
        env:
          POSTGRES_USER: mreg
          POSTGRES_DB: mreg
          POSTGRES_PASSWORD: postgres
        # Add health checks and trick it into creating the citext
        # extension when ready.
        options: >-
          --health-cmd "pg_isready && PGPASSWORD=$POSTGRES_PASSWORD psql -U mreg -c 'CREATE EXTENSION IF NOT EXISTS citext;' mreg || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      mreg:
        image: ghcr.io/${{ github.repository_owner }}/mreg:latest
        options: >-
          --name mreg
        env:
          GUNICORN_ARGS: --bind=0.0.0.0
          MREG_DB_HOST: postgres
          MREG_DB_PASSWORD: postgres
        ports:
          - 8000:8000
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: mreg-cli.tar.gz
      - name: Unpack mreg-cli
        run: |
          tar -xf mreg-cli.tar.gz -C ${{ runner.temp }}
          echo "${{ runner.temp }}/bin" >> $GITHUB_PATH
      - name: Unpack test suite
        uses: actions/download-artifact@v2
        with:
          name: testsuite
      - name: Create superuser
        run: |
          echo -ne '
          from django.conf import settings
          from django.contrib.auth import get_user_model
          from django.contrib.auth.models import Group
          user = get_user_model().objects.create_user(
            username="ci",password="test")
          user.groups.clear()
          su = getattr(settings, "SUPERUSER_GROUP", None)
          group, created = Group.objects.get_or_create(name=su)
          group.user_set.add(user)
          ' | docker exec -e MREG_DB_PASSWORD=postgres -e MREG_DB_HOST=postgres \
                -i mreg python /app/manage.py shell
      - name: Run tests
        run: >
          echo -ne 'test\nsource testsuite\nquit\n'
          | mreg-cli -u ci -d example.org --url http://localhost:8000
